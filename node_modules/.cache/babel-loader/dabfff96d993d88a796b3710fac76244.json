{"ast":null,"code":"import React from \"react\";\nlet accessToken;\nconst clientId = 'aa16e4d877fc4fbda1bba2ccd94014e0';\nconst redirectUri = 'http://localhost:3000/';\n\nclass Spotify extends React.Component {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  }\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  }\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorizattion: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        header: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n}\n\nexport default Spotify;","map":{"version":3,"sources":["/home/rob/codeAcademy/react/jammming/src/util/Spotify.js"],"names":["React","accessToken","clientId","redirectUri","Spotify","Component","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","Authorizattion","userId","header","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["import React from \"react\"\n\nlet accessToken;\nconst clientId = 'aa16e4d877fc4fbda1bba2ccd94014e0';\nconst redirectUri = 'http://localhost:3000/'\n\n\nclass Spotify extends React.Component {\n\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n      window.location = accessUrl;\n    }\n  }\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken()\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }))\n    })\n  }\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorizattion: `Bearer ${accessToken}`\n    }\n    \n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        header: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        })\n      })\n    })\n  }\n}\n\nexport default Spotify\n"]},"metadata":{},"sourceType":"module"}