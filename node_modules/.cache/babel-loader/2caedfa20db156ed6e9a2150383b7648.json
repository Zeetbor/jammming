{"ast":null,"code":"var accessToken;var clientId='aa16e4d877fc4fbda1bba2ccd94014e0';var redirectUri='jammming.surge.sh';var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}var accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);window.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},savePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorizattion:\"Bearer \".concat(accessToken)};var userId;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"sources":["/home/rob/codeAcademy/react/jammming/src/util/Spotify.js"],"names":["accessToken","clientId","redirectUri","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","Authorizattion","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["let accessToken;\n\nconst clientId = 'aa16e4d877fc4fbda1bba2ccd94014e0';\nconst redirectUri = 'jammming.surge.sh'\n\n\nconst Spotify = {\n\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken()\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }))\n    })\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorizattion: `Bearer ${accessToken}`\n    }\n\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        })\n      })\n    })\n  }\n}\n\nexport default Spotify\n"]},"metadata":{},"sourceType":"module"}