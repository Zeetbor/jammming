{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","AddTrack","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","PlaylistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","Authorizattion","method","body","JSON","stringify","playlistId","uris","App","playlistName","playlistTracks","updatePlaylistName","find","savedTrack","filter","PlaylistName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ba7b42a.chunk.js","sourcesContent":["let accessToken;\n\nconst clientId = 'aa16e4d877fc4fbda1bba2ccd94014e0';\nconst redirectUri = 'jammming.surge.sh'\n\n\nconst Spotify = {\n\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken()\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }))\n    })\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorizattion: `Bearer ${accessToken}`\n    }\n\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        })\n      })\n    })\n  }\n}\n\nexport default Spotify\n","import React from \"react\"\nimport \"./SearchBar.css\"\n\nclass SearchBar extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      term: \"\"\n    }\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search(){\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(e){\n    this.setState({term: e.target.value})\n  }\n\n  render(){\n    return(\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar\n","import React from \"react\"\nimport \"./Track.css\"\n\n\nclass Track extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this)\n  }\n\n  renderAction(){\n    if(this.props.isRemoval){\n      return <button className=\"Track-action\" onClick={this.removeTrack}> - </button>\n    } else {\n      return <button className=\"Track-action\" onClick={this.AddTrack}> + </button>\n    }\n  }\n\n  addTrack(){\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack(){\n    this.props.onRemove(this.props.track);\n  }\n\n  render(){\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    )\n  }\n}\n\nexport default Track\n","import React from \"react\"\nimport \"./Tracklist.css\"\nimport Track from '../Track/Track.js'\n\nclass TrackList extends React.Component {\n\n  render(){\n    return(\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map(track => {\n          return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove}/>;\n          })\n        }\n      </div>\n    );\n  }\n}\n export default TrackList\n","import React from \"react\"\nimport \"./SearchResults.css\"\nimport TrackList from \"../Tracklist/Tracklist.js\"\n\n\nclass SearchResults extends React.Component {\n  render(){\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\n      </div>\n    )\n  }\n}\n export default SearchResults\n","import React from \"react\"\nimport \"./Playlist.css\"\nimport TrackList from \"../Tracklist/Tracklist.js\"\n\nclass Playlist extends React.Component{\n  constructor(props){\n    super(props)\n    this.handleNameChange = this.handleNameChange.bind(this)\n  }\n\n  handleNameChange(e){\n    this.props.onNameChange(e.target.value);\n  }\n\n  render(){\n    return(\n      <div className=\"Playlist\">\n        <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\n        <TrackList tracks={this.props.PlaylistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    )\n  }\n}\n\nexport default Playlist\n","import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar.js'\nimport SearchResults from '../SearchResults/SearchResults.js'\nimport Playlist from '../Playlist/Playlist.js'\nimport Spotify from '../../util/Spotify.js'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"Playlist 1\",\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n  }\n\n  removeTrack(track) {\n    if (this.state.playlistTracks.filter(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n  }\n\n  updatePlaylistName(name) {\n    return this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n  }\n\n  render() {\n    return (\n      <div >\n        <h1> Ja <span className = \"highlight\" > mmm < /span>ing</h1 >\n        <div className = \"App\" >\n          <SearchBar onSearch={this.search}/>\n          <div className = \"App-playlist\" >\n            <SearchResults\n              searchResults = {this.state.searchResults}\n              onAdd = {this.addTrack}\n            />\n            <Playlist\n              PlaylistName = {this.state.playlistName}\n              PlaylistTracks = {this.state.playlistTracks}\n              onRemove = {this.removeTrack}\n              onNameChange = {this.updatePlaylistName}\n              onSave = {this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}